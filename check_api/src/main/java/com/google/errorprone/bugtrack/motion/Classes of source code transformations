Project diff links:
  https://github.com/google/guice/compare/<diff-link>

Technique 1. Character line tracking
Description: Use diff information to track the source lines between two versions, matching two diagnostics if they
             occur in the same position. DIFF-INFORMATION-POS-MAPPER(oldPosition) == newPosition.

Technique 2. Tokenized line tracking
Description: Use diff information track tokenized source lines between two versions, matching diagnostics based on same
             principle as Character line tracking. This technique is slightly more expensive because we have to parse
             the AST of the source file.

Technique 3. Single AST node tracking (via start position)
Description: Use diff information derived from AST difference algorithms (Curently IJM). Match the start position of a
             diagnostic to a node in the AST of the old source file. Hope the AST matched that node in a new AST. Match
             the diagnostic if the source buffer position of the newly matched node is the same as the diagnostic start
             pos.

Techinque 4. Single AST node tracking (via start & end position)


Case 1: The line get's put over multiple lines.
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 240 38
    240: scopeInstancesInUse.computeIfAbsent(scope, k -> Lists.newArrayList());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 281 19
    280: scopeInstancesInUse
    281:     .computeIfAbsent(scope, k -> Lists.newArrayList())
    282:     .add(binding.getSource());

Case 2: The line itself get's changed a bit, but the detected expression remains unchanged
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 95 42
    95. Multiset<Object> sources = backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 88 15
    88. backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create()).add(convertedSource);

Case 3: Indentation changes.
Breaks: Character Line Tracking
Doesn't break: Tokenized line tracking
[BooleanParameter] Use parameter comments to document ambiguous literals
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 340 75   [Detected by TokenizedLineTracker]
    340.           binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 351 73
    351.         binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));


Case 4:  Line with diagnostic on is deemed as "deleted" from the source file
Breaks: Definately Character&Token line tracking, maybe not node tracking
[InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: <init>(String message, Throwable cause, List<Object> sources)
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 50 10
    50. public Message(List<Object> sources, String message, Throwable cause) {
 /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 60 10
    60. public Message(List<Object> sources, String message, Throwable cause) {
 Probable cause of problem:
    d071 Message.java 52. public Message(ErrorId errorId, List<Object> sources, String message, Throwable cause) {
 The above introduced line since it's similar to 8758 line 50 confuses the diff algorithm

Case 5: The error is not bound to specific source code
Breaks: All so far
Example: ([DefaultPackage if it ever occured in the wild)
[MissingSummary] A summary line is required on public/protected Javadocs.
  mybatis3 1385892b6d0034485ac31a4f8a4a438ad2f5ad55..b3c5ffae3d9d7cb3062ea12f2606909cd4b9e9c8
  /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/GenericTypeSupportedInHierarchiesTestCase.java
  Error prone reports the line number as '-1' for MissingSummary hence any position tracking fails.

Case 6: Start pos token changes
 Original case but solved:
    [ClassNamedLikeTypeParameter] The class's name looks like a Type Parameter
      guice 875868e7263491291d4f8bdc1332bfea746ad673..b7cadc1cfa0623ad377c274eb8db278e3e9a7054
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 159 10 4705 4825
        159. static class A {
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 169 17 4982 5109
        169. public static class A {
      Case of problem:
        Implementation problem since our AST diff algorithm currently uses a different AST representation JDT to javac's JC.
        To solve this we created the 'JDTtoJCPosMapper'

        The position generated by the diagnostric refers to the 'class' token which means whatever is inserted at the front
        doesn't affect tracking the start posiiton of the diagnostic however:
 Currently unsolved:
    [UngroundOverloads] Overloads of 'header' are not grouped together...
      jsoup 63 f4338e20a5e439632e3d2fc8fa3a330ade6d02ad..91 50576455fd4f244375d05b029c25b3b17edfbb74
        /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/Connection.java 383 16 14390 14417
          383. String header(String name);
        /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/Connection.java 384 26 14544 14581
          384. @Nullable String header(String name);

      In this case tracking the start position does not work since the start position points to the start of the MethodDecl
      So 14390 points to the 'String' which is the thing we track through AST diff'ing, however 14544 refers to '@Nullable'


Case 7. Two diagnostics generated with same start position
  Breaks: All but 4
  [AndroidJdkLibsChecker] java.time.ZomedDateTime is not available
    mybatis3 2065ebbfd79ba3a54568d6767963b1d5b31a54ad..638a00c9c91cf87a740d9b9e680acefc7685e273
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 33 1388 1401
        40. ...'ZonedDateTime'...
     Matches with both:
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 46 1388 1407
        40. ...'ZoneDateTime.class'...
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 46 1388 1401
        40. ...'ZoneDateTime'...

Case 8. import statics aren't registed in the AST shape (either JDT or spoon) so in specific scenarios can break...
[WildcardImport] Wildcard imports, static or otherwise, should not be used
  mybatis3 0bbefb25236a4c6aaab3a2138aa71d3de2615e8c..b4a235b4e1583fd07a41322cbdae94fbee979498
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java 33 1 1217 1266
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java 18 1 694 743

Case 9. start position of the diagnostic stays the same, end position doesn't
   Breaks: all but 3
   [MutableMethodReturnType]
   guice 1bfd94468212e96e0ef3ea9c2da8e6ad19b40b18..80b91afae2f42b938597387c0e8dce419416ca92
      /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTest.java 169 18 6315 6318
        169. public Map getParameterMap() {
      /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTest.java 173 21 6405 6426
        173. public Map<String, String[]> getParameterMap() {

Case 10. Naive tokenization doesn't even guarentee whitespace invariant tracking
    [CatchingUnchecked]
    mybatis3 45a1fcbfa2cef5c9b3bf1fe808498a69467df07a..45ad7efa430d1a59dc3e64431fe22ce45d947f83
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/HeavyInitialLoadTest.java 69 11 2684 2759
          69. } catch(Exception exception) {
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/HeavyInitialLoadTest.java 69 11 2684 2759
          70. } catch (Exception exception) {

Nice: Method refactored and IJM tracks it
   Comparer 2 tracked the below diagnostic whereas 1 didn't
 ----DIAGNOSTIC
 /home/monty/IdeaProjects/java-corpus/metrics/metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedHttpChannelListenerTest.java 130 5 5444 5451
 [MethodCanBeStatic] A private method that does not reference the enclosing instance can be static
     (see https://errorprone.info/bugpattern/MethodCanBeStatic)
   Did you mean 'private static String metricName() {'?
   to:
 ----DIAGNOSTIC
 /home/monty/IdeaProjects/java-corpus/metrics/metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedHttpChannelListenerTest.java 134 5 4727 4734
 [MethodCanBeStatic] A private method that does not reference the enclosing instance can be static
     (see https://errorprone.info/bugpattern/MethodCanBeStatic)
   Did you mean 'private static String metricName(String metricName) {'?

Case 11. IJM cannot track it
    guice 62 af26c7247984f7753c1a84ead9186584f7ef8d51..96 fd4ef5e6a3dbe570383e1dd6763884dba900ad7c
    https://github.com/google/guice/compare/af26c7247984f7753c1a84ead9186584f7ef8d51..fd4ef5e6a3dbe570383e1dd6763884dba900ad7c#diff-a9274f9e5527fc735cd8ebbd9df331fbe8c571f88d1f2de2d6264d7c93de676cL977
    Old:
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/OptionalBinderTest.java 977 5 38707 39162
        [TryFailRefactoring] Prefer assertThrows to try/fail
        Did you mean 'CreationException expected = assertThrows(CreationException.class, () -> Guice.createInjector('?
    New:
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/OptionalBinderTest.java 1001 5 39331 39581
        [TryFailRefactoring] Prefer assertThrows to try/fail
        Did you mean 'CreationException expected = assertThrows(CreationException.class, () -> Guice.createInjector(module));'?
    Possible intuition: Diagnostics which encompass large trees are more likely to have subtrees changed so harder to track through AST diff'ing
       Have possibly solved by forcing the tracking of 'try' statement keywords

    dubbo 70 d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..94 dcee618463696494e1748b40e8d58e6e1f5ed19d
        HeaderExchangeClient.java BooleanParameter L:65 -> L:48
            https://github.com/apache/dubbo/compare/d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..dcee618463696494e1748b40e8d58e6e1f5ed19d#diff-456035e093c8422b12ad6f7df3b92675f843e19d2537421ddd92b79f1fd61650L65
            This one seems to be in particular a series of refactorings, where most likely it's the same diagnostic
              just AST differencing has very little chance here. Perhaps refactoring inference might?

    mybatis3 2 640af60c22010fd56dee7db0ad8cdd420fb19f6a..72 45a1fcbfa2cef5c9b3bf1fe808498a69467df07a
    ----DIAGNOSTIC
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 61 23 2148 -1 2175
     [AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
        60. private MapperMethod cachedMapperMethod(Method method) {
        61.    return methodCache.computeIfAbsent(method, k -> new MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));
        62. }

     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 94 25 3391 -1 3418
     [AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
        92. private MapperMethodInvoker cachedInvoker(Method method) throws Throwable {
        93.     try {
        94.         return methodCache.computeIfAbsent(method, m -> {
        95.             if (m.isDefault()) {
        96.                 try {
        97.                     if (privateLookupInMethod == null) {
        98.                         return new DefaultMethodInvoker(getMethodHandleJava8(method));
        99.                     } else {
        100.                        return new DefaultMethodInvoker(getMethodHandleJava9(method));
        101.                    }
        102.                } catch (IllegalAccessException | InstantiationException | InvocationTargetException
        103.                            | NoSuchMethodException e) {
        104.                    throw new RuntimeException(e);
        105.                }
        106.            } else {
        107.                return new PlainMethodInvoker(new MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));
        108.            }
        109.        });
        110.    } catch (RuntimeException re) {
        111.        Throwable cause = re.getCause();
        112.        throw cause == null ? re : cause;
        113.    }
        114.}

        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 50 24 1789 -1 1805
        [AndroidJdkLibsChecker] java.lang.reflect.Method#isDefault() is not available in java.lang.reflect.Method
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 95 14 3446 -1 3457
        [AndroidJdkLibsChecker] java.lang.reflect.Method#isDefault() is not available in java.lang.reflect.Method

     hazelcast 11 8b4b2d452f8ceb6cc82ebc7cfa1a3c2e7ab34d5f..120 093d1345022cb8d756219dbd5ee017b20dd032a3
        ----DIAGNOSTIC
        /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.java 652 101 27120 27120 27124
        Did you mean 'PartitionStateOperation operation = new PartitionStateOperation(partitionState, /* sync= */true);'?
        ----DIAGNOSTIC
        /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.java 675 90 27963 27963 27967
        Did you mean 'PartitionStateOperation op = new PartitionStateOperation(partitionState, /* sync= */false);'?
        Close but doesn't get there sadly e.g matches 653 -> 676 but not 652->

     mcMMO 0 2e7f56eeb5faaf71d14fe657a35b0b766e2ffe41..134 74a2485cffc987c75ba41b24eeee28e8317445d5
        ----DIAGNOSTIC
        /rds/user/am2857/hpc-work/java-corpus/27022/src/main/java/com/gmail/nossr50/skills/repair/repairables/RepairableFactory.java 14 30 557 582 997
        [InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: getRepairable(Material itemMaterial, Material repairMaterial, byte repairMe    tadata, int minimumQuantity, short maximumDurability, int minimumLevel, ItemType repairItemType, MaterialType repairMaterialType, double xpMultiplier)
        ----DIAGNOSTIC
        /rds/user/am2857/hpc-work/java-corpus/27022/src/main/java/com/gmail/nossr50/skills/repair/repairables/RepairableFactory.java 13 30 481 506 846
        [InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: getRepairable(Material itemMaterial, Material repairMaterial, short maximum    Durability, int minimumLevel, ItemType repairItemType, MaterialType repairMaterialType, double xpMultiplier)
       IJM method matching might struggle with factory methods since there are lots of similar candidates?

     mcMMO 7 2b159adefd65717f264d025aaba28b0c866fb5a9..149 76ca7cc88fb810076ab547f3d6571a85e0fcba7d
     ----DIAGNOSTIC
     src/main/java/com/gmail/nossr50/listeners/BlockListener.java 398 114 16232 16232 16236
       Did you mean 'if (AbilityType.BERSERK.blockCheck(block.getState()) && EventUtils.simulateBlockBreak(block, player, /* shouldArmSwing= */true)) {'?
     ----DIAGNOSTIC
     src/main/java/com/gmail/nossr50/listeners/BlockListener.java 593 66 22716 22716 22720
       Did you mean 'if (EventUtils.simulateBlockBreak(block, player, /* shouldArmSwing= */true) && mcMMOPlayer.getUnarmedManager().blockCrackerCheck(blockState)) {'?
     Spaghetti conditionals, would have though identical subtree would match it but apparently not

    // TODO: investigate why these aren't matched?
     mcMMO 91 fef9058e1698e7cfd09b045a79852c8909f68470..187 749c83ac59ab8a5c47a322759fd0ddf7e090b461
     [UnnecessaryDefaultInEnumSwitch] Switch handles all enum values: move code from the default case to execute after the switch statement to enable checking for non-exhaustive switches. That is, prefer: `switch     (...) { ... } throw new AssertionError();` to `switch (...) { ... default: throw new AssertionError(); }`
     RandomChanceUtil.java 44 13 2250 2250 2288
     RandomChanceUtil.java 44 13 2271 2271 2309
     Remain unchanged but IJM cannot track it?

     [CatchAndPrintStackTrace] Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace
     WorldBlacklist.java 65 13 1722 1722 1742
     WorldBlacklist.java 77 17 2031 2031 2051

     jsoup 36 0fc3d6728ae270fb38f9778ad7fa2663060b50c7 -> 93 3afde5830e5bc811dfaf214be86652e2c1f95489
     (src/test/java/org/jsoup/integration/ConnectTest.java [UnusedVariable] 435 22 16139 16177)
     should match to 466 but doesn't appear as "deleted", mismatched to something else?

     jsoup 44 a8d431bad9575d5f32d7b87252962a8aae02d59f -> 83 77fcaf4dcdc8fd185e2f5d8eb6aa9c425a38bc9b
     src/main/java/org/jsoup/internal/StringUtil.java [JdkObsolete] 232 58 8558 8571



Case 12. IJM improperly tracks it
    dubbo/7 427e2d237aca9cb0fca83b3e17c6bdb1bc2abf86..123 6a7028446bcd76ec75c742ab283c7dc5675144e7
      ---- DIAGNOSTIC
      dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/DynamicConfiguration.java 55 10 2025 2100
      [UngroupedOverloads] Overloads of 'addListener' are not grouped together; found ungrouped overloads on line(s): 35
      ---- MAPS TO:
      dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/DynamicConfiguration.java 72 10 2753 2831
      [UngroupedOverloads] Overloads of 'removeListener' are not grouped together; found ungrouped overloads on line(s): 49
    Not too sure as to why it does this...

    jsoup/3 18ef323541f6c369824e0c726b2be55880ec36da..65 bd64b0192c7d3485665afdc10805b587df19eab3
    ----DIAGNOSTIC
    src/main/java/org/jsoup/helper/HttpConnection.java 615 21 19376 19388 19483
    [MissingOverride] validateTLSCertificates implements method in Request; expected @Override
        615. public void validateTLSCertificates(boolean value) {
        616.    validateTSLCertificates = value;
        617. }
     to:
     src/main/java/org/jsoup/helper/HttpConnection.java 614 21 19293 19305 19422
     [MissingOverride] sslSocketFactory implements method in Request; expected @Override
        610. public SSLSocketFactory sslSocketFactory() {
        611.    return sslSocketFactory;
        612. }

     hazelcast 2 7e36e092c8066d9c28656abf8cc2c83cbf6f28b7..51 ad5251208122c5d0f27a3cff3881cda17f957c3a
     /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java 354 57 16136 16161 16166
         Did you mean 'List<String> strList = Splitter.on('&').splitToList(bytesToString(data));'?
     /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java 356 66 16022 16060 16065
         Did you mean 'List<String> strList = Splitter.on('&').splitToList(bytesToString(command.getData()));'?
     Alot of statements are deleted and changed a fair amount so probably just below threshold, surprised not caught on the bottom up matching though

     mcMMO 2 15436b44da9d8ad42abf486c5e6795f5424af15e..174 3a035e234a5931a7b218ffc609fd5630b8d0b478
     PartyManager.java 196 53 6632 6668 6680
        [CollectionIncompatibleType] Argument 'playerName' should not be passed to this method; its type String is not compatible with its collection's type argument UUID
        if (party.getMembers().keySet().contains(playerName)) {
     PartyManager.java 252 47 8577 8607 8619
        if (party.getMembers().containsKey(playerName)) {
        Note: Tracks party.getmembers() but cannot map playerName so only tracking start position would work here

      mcMMO 149 b125600dac8937a19c5af0c194752a19eeb771ce -> 153 d599db289717c2ad862787e7287c08413a7048fa
      ----DIAGNOSTIC
      src/main/java/com/gmail/nossr50/config/Config.java 704 58 21585 21585 21589
      [BooleanParameter] Use parameter comments to document ambiguous literals
      Did you mean 'return config.getBoolean("Particles.LargeFireworks", /* def= */true);'?
        to
      ----DIAGNOSTIC
      src/main/java/com/gmail/nossr50/config/Config.java 256 57 8565 8565 8569
      [BooleanParameter] Use parameter comments to document ambiguous literals
      Did you mean 'return config.getBoolean("General.AprilFoolsEvent", /* def= */true);'?

      guice 9b371d3663db9db230417f3cc394e72b705d7d7f .. 37c098d55911f55d77a5a72dfafd9b0976bcf257
        core/src/com/google/inject/internal/ProviderMethodsModule.java 348 14 13430 13453 13517
        [HashCodeToString] Classes that override hashCode should also consider overriding toString.
      Did not track since hashCode method was small enough that entire subtree changed

Case 13. Diagnostics are collected together into 'one diagnostic'
    ProtectedMembersInFinalClass reports multiple locations are one diagnostic
    dubbo/88 19c1af845d51f3537d95ed645e1a7388a7989aa1..119 bef8f6d9013c9f086327939e0c39fe102f47dfbd
    ----DIAGNOSTIC
    /home/monty/IdeaProjects/java-corpus/dubbo/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java 46 35 1854 1945
    [ProtectedMembersInFinalClass] Make members of final classes package-private: REQUEST_WITH_WARNING_KEY, requestWithWarning
    (see https://errorprone.info/bugpattern/ProtectedMembersInFinalClass)
    Did you mean 'static final String REQUEST_WITH_WARNING_KEY = "lazyclient_request_with_warning";'?

    RemoveUnusedImports generates one per import block and not one per import
    jsoup 63 f4338e20a5e439632e3d2fc8fa3a330ade6d02ad..91 50576455fd4f244375d05b029c25b3b17edfbb74
    [RemovedUnusedImports] UrlConnectTest.java 4 1 -> UrlConnectTest.java 6 1

Case 14. Start/end position moved into a different token
    hazelcast 0 6a5bc11894e312366e82d4c808df31c2d441d0fc..119 695e5765a6821d78af498ea3054acb568106b967
    [FutureReturnValueIsIgnored] /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/HeartbeatManager.java 61 40 2804 2878 2936
        60. client.getClientExecutionService()
        61.            .scheduleWithRepetition(this, heartbeatInterval, heartbeatInterval, MILLISECONDS);
    [FutureReturnValueIsIgnored] /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/HeartbeatManager.java 62 34 2923 2948 3015
        61. final ClientExecutionServiceImpl es = (ClientExecutionServiceImpl) client.getClientExecutionService();
        62. es.scheduleWithRepetition(this, heartbeatInterval, heartbeatInterval, TimeUnit.MILLISECONDS);
    Old start position points to client token, new start position points to es token.
    Possible heuristic is just match against old mapped start position

    hazelcast 11.120
    [InconsistentOverloads] /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/InternalPartitionImpl.java 172 23 6358 6376 6673
        172. public static int getReplicaIndex(Address[] addresses, Address address) { ... }
    [InconsistentOverloads] /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/InternalPartitionImpl.java 202 16 7403 7414 7727
        202. static int getReplicaIndex(PartitionReplica[] replicas, PartitionReplica replica) { ... }
    Since 'public' token is deleted there's a start position mismatch

    mcMMO 2 15436b44da9d8ad42abf486c5e6795f5424af15e..174 3a035e234a5931a7b218ffc609fd5630b8d0b478
    /rds/user/am2857/hpc-work/java-corpus/27022/src/main/java/com/gmail/nossr50/database/DatabaseManager.java 106 26 3700 3721 3788
    [InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: loadPlayerProfile(String playerName, boolean createNew, UUID uuid)
    /rds/user/am2857/hpc-work/java-corpus/27022/src/main/java/com/gmail/nossr50/database/DatabaseManager.java 114 19 3870 3884 3951
    [InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: loadPlayerProfile(String playerName, boolean createNew, UUID uuid)
        Same case as hazelcast 11..120

    mcMMO 31 626890ed95d0d7ba87ab46ca852f02ee8b893410..135 53d6065185b5a840d0f1ae40c7e60796530185aa
    [MultiVariableDeclaration] Roll.java 388 16 15064 15071 15077 -> Roll.java 395 16 16023 16030 16047
        double curve, maxBonusLevel, playerChanceRoll, playerChanceGrace;
        double playerChanceRoll, playerChanceGrace;
      token end position points to was deleted
      Start position can track this but not the below one, interesting

    mcMMO 43 655a31d5567c7c0f88a0e767875aa25f26abf743..78 d81c3d06c5134ceea97730ffa6d038891b4e88d8
     Roll.java 363 16 14028 14035 14053
       Did you mean 'double rollChanceHalfMax;double graceChanceHalfMax;double maxBonusLevel;double curve;double damageThreshold;double chancePerLevel;'?
     Roll.java 376 16 14765 14772 14790
       Did you mean 'double rollChanceHalfMax;double graceChanceHalfMax;double damageThreshold;double chancePerLevel;'?
    Threshold problem for why this did not track?

    Tracking by diagnostic position could solve these problems

Case 15. partial-expressions moving across method/field boundaries
    dubbo 70 d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..94 dcee618463696494e1748b40e8d58e6e1f5ed19d
        HeaderExchangeClient.java BooleanParameter L:65 -> L:48
            https://github.com/apache/dubbo/compare/d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..dcee618463696494e1748b40e8d58e6e1f5ed19d#diff-456035e093c8422b12ad6f7df3b92675f843e19d2537421ddd92b79f1fd61650L65
            This one seems to be in particular a series of refactorings, where most likely it's the same diagnostic
              just AST differencing has very little chance here. Perhaps refactoring inference might?

    hazelcast 2 7e36e092c8066d9c28656abf8cc2c83cbf6f28b7..51 ad5251208122c5d0f27a3cff3881cda17f957c3a
        Field initalized at declaration split into 2 constructs and initalized identical ways [JdkObsolete]
        /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java 90 52 3220 3220 3252
        to:
        /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java 158 31 7329 7329 7365
        /rds/user/am2857/hpc-work/java-corpus/hazelcast/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java 115 31 4699 4699 4735

Case 16. Moves between files
    jsoup 7 850a9cc02fb72cc450d1a9dc41912fa80fee9020 -> 82 5727d18a04df73982ce8e6d77e965cb768cfee7d
    src/main/java/org/jsoup/safety/Whitelist.java [MethodCanBeStatic] 554 5 21396 21403
    src/main/java/org/jsoup/safety/Safelist.java  [MethodCanBeStatic] 565 5 21677 21677 21684
    Reason: The method is extracted into a superclass

Case 17. Diagnostics moving even though code is unchanged
    jsoup 37 468c5369b52ca45de3c7e54a3d2ddae352495851..54 e02085409f0bdd7e71441fc62448192720305444
    /home/monty/IdeaProjects/java-corpus/jsoup/src/test/java/org/jsoup/integration/ConnectTest.java 13 1 483 483 531
    [RemoveUnusedImports] Unused imports: org.jsoup.integration.servlets.SlowRider, org.junit.Ignore, java.net.SocketTimeoutException
    /home/monty/IdeaProjects/java-corpus/jsoup/src/test/java/org/jsoup/integration/ConnectTest.java 6 1 123 123 161
    [RemoveUnusedImports] Unused imports: org.jsoup.UncheckedIOException, org.jsoup.integration.servlets.SlowRider, org.junit.Ignore, java.net.SocketTimeoutException

    Changing code below these import blocks, but import blocks remain unchaged so things move around

    Junit checks use a whitelist of known classes containing assert methods
    jsoup moves from org.junit.Assert to org.junit.jupiter.api.Assertions
    which means import statemetns suddenly nuke all junit diagnostics

    mcMMO 9ae58fd2f70b1a6e9514cb4d1a7b0a63e8ffb6e0..29befac27e507d7ab42c7b162223d8da7ea994da
    Adds diagnostic: ChatColor is unused import on a line not changed by the diff

    mcMMO b8a146f8bd22ec5dedeac37950efdf79e67bca11..6ad9c8e664beeaf0d4b7cb73da2fba73989a7551
    src/main/java/com/gmail/nossr50/util/sounds/SoundManager.java 70 7 2359 2359 2388 [UnnecessaryDefaultInEnumSwitch]
    Adding stuff inside the switch makes the default redundant but gnostic is outside changed lines

Case 18. Diagnostics messages can change even if the code remains unchanged
    mcMMO 63378ae4c14315ba0365129fad625f062ad2233d..7800e48f61d0563f669a2557661f5f617a8cf3b1
      src/main/java/com/gmail/nossr50/util/StringUtils.java 45 5 1460 1460 -1
      [MissingCasesInEnumSwitch] Non-exhaustive switch; either add a default or handle the remaining cases: ACACIA_BOAT, ACACIA_BUTTON, ACACIA_DOOR, and 1304 others
    to:
      src/main/java/com/gmail/nossr50/util/StringUtils.java 45 5 1460 1460 -1
      [MissingCasesInEnumSwitch] Non-exhaustive switch; either add a default or handle the remaining cases: ACACIA_BOAT, ACACIA_BUTTON, ACACIA_DOOR, and 1319 others
    Switch case in other file changes

    guice 84e0ce89ba6afa8cbe7ded6e7baa49353167a11f .. 51ba928a1b641afb2f525b28787aaa5ba3bc29cc
      core/src/com/google/inject/internal/BindingProcessor.java 86 23 2952 2952 2957
      [BooleanParameter] Use parameter comments to document ambiguous literals
      Did you mean '/* failIfNotExplicit= */false);'?
    to
      core/src/com/google/inject/internal/BindingProcessor.java 86 23 2952 2952 2957
      [BooleanParameter] Use parameter comments to document ambiguous literals
      Did you mean '/* atInjectRequired= */false);'?
    Parameter is external file was renamed causing the diagnostic message to change
    guice 84e0ce89ba6afa8cbe7ded6e7baa49353167a11f .. 51ba928a1b641afb2f525b28787aaa5ba3bc29cc


Case 19. Diagnostic removed even though line it's in unchanged lines
    guice a533bf26c612003a99996f07f64148ddd1602d06 -> dafa4b0bec4e7ec5e1df75e3fb9a2fdf4920921a
    ----DIAGNOSTIC
    core/test/com/google/inject/spi/InjectorSpiTest.java 113 55 4504 4504 4521
    [ModifiedButNotUsed] A collection or proto builder was created, but its values were never accessed.
    ----DIAGNOSTIC
    core/test/com/google/inject/spi/InjectorSpiTest.java 114 39 4561 4561 4578
    [ModifiedButNotUsed] A collection or proto builder was created, but its values were never accessed.
    Changed lines of code make the variables on these unchanged lines suddenly used

False positives:
     guice 20 8c596b2a20e1ebc396ee4c396f165a01ab2d0de4 -> 22 09b7f977ec1ab5b7af9b060a10932316a6e973e2
     ----DIAGNOSTIC
     extensions/dagger-adapter/test/com/google/inject/daggeradapter/DaggerAdapterTest.java 256 25 7422 7484 7534
     [EmptySetMultibindingContributions] @Multibinds is a more efficient and declarative mechanism for ensuring that a set multibinding is present in the graph.
     (see https://errorprone.info/bugpattern/EmptySetMultibindingContributions)
     Did you mean '@dagger.Module static abstract class ElementsIntoSetModule {'?
      to
     ----DIAGNOSTIC
     extensions/dagger-adapter/test/com/google/inject/daggeradapter/DaggerAdapterTest.java 149 24 4279 4340 4417
     [EmptySetMultibindingContributions] @Multibinds is a more efficient and declarative mechanism for ensuring that a set multibinding is present in the graph.
     (see https://errorprone.info/bugpattern/EmptySetMultibindingContributions)
     Did you mean '@dagger.Module static abstract class UnsupportedAnnotationStaticModule {'?


Example of "bad" positioning, ie appears halfway in a node
    875868e7263491291d4f8bdc1332bfea746ad673 1
    ----DIAGNOSTIC
    /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTestUtils.java 73 14 2230 2230 2233
    [MutableMethodReturnType] Method return type should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List). Note that it is legal to narrow the     return type when overriding a parent method. And because this method cannot be overridden, doing so cannot cause problems for any subclasses.
    (see https://errorprone.info/bugpattern/MutableMethodReturnType)
    Did you mean 'public ImmutableMap getParameterMap() {'?
    a81072df067e4ab811ab01bda34e4b2722a66988 1
    ----DIAGNOSTIC
    /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTestUtils.java 73 17 2233 2236 2254
    [MutableMethodReturnType] Method return type should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List). Note that it is legal to narrow the     return type when overriding a parent method. And because this method cannot be overridden, doing so cannot cause problems for any subclasses.
    (see https://errorprone.info/bugpattern/MutableMethodReturnType)
    Did you mean 'public ImmutableMap<String, String[]> getParameterMap() {'?
    2236 points into a middle of a node who's offset is difficult to maintain since the gap may not be uniform

    Intuition: Point at large coarse grained structured that is likely to appear in an AST. Pointing at '.' or ')'
        aren't likely to be included in AST as AST differencing want trees to be slim and including a dedicated '.'
        node for everything would bloat them

Example: Tokenized line git based tracking can also get things wrong
    mcMMO 01a7aa4d1264827d878a9181ade269bd4d019a31..362d036b16082a9fb78972d15570bfbd3c9ea3a6
     ----DIAGNOSTIC
     mcMMO/src/main/java/com/gmail/nossr50/util/skills/SkillUtils.java 316 7 11915 11915 11945
     [UnnecessaryDefaultInEnumSwitch] Switch handles all enum values: move code from the default case to execute after the switch statement to enable checking for non-exhaustive switches.
     ----DIAGNOSTIC
     mcMMO/src/main/java/com/gmail/nossr50/util/skills/SkillUtils.java 473 7 17535 17535 17565
     [UnnecessaryDefaultInEnumSwitch] Switch handles all enum values: move code from the default case to execute after the switch statement to enable checking for non-exhaustive switches. That is, prefer: `switc     h (...) { ... } throw new AssertionError();` to `switch (...) { ... default: throw new AssertionError(); }`

Example of lower resolution missing diagnostics:
    mybatis3 348c9123f2be0dd015ed29fabfafa5ac7e7c7601 -> 1add4b47ed4313d08e8de2821c55fae1d4b4c8bd -> a382a685cae5aff08922399dc2cda63f64860b83 -> 36984dcc37c017f19873d790f3db4f2ddc30501d
               ^ Start of 50                                 ^ Enters in 12                              ^ Leaves in 12                            ^ End of 50
    Following diagnostic lost by 21 348c9123f2be0dd015ed29fabfafa5ac7e7c7601 -> 24 36984dcc37c017f19873d790f3db4f2ddc30501d
    ----DIAGNOSTIC
    /rds/user/am2857/hpc-work/java-corpus/23439/src/main/java/org/apache/ibatis/cache/NullCacheKey.java 16 5 658 658 658
    [MissingSummary] A summary line is required on public/protected Javadocs.



Perhaps useful things to write about or reference in report:
    Qualified names of the form 'X.Y' are now a root nodes with to children for X and Y respectively.
       mybatis3 28..57 /MonthTypeHandlerTest.java AndroidJdkLibsChecker were getting confused
    Labels on static import's

    Nice example of fine grained tracking:
    jsoup 27 2da07a110b04c7d181c04c0fbcfb141035255374..83 77fcaf4dcdc8fd185e2f5d8eb6aa9c425a38bc9b
        ElementTest.java UnncessaryParenthesis L:953 -> L:1064
            assertFalse(e0.hashCode() == (e2.hashCode())); -> assertNotEquals(e0.hashCode(), (e2.hashCode()));
        ElementTest.java UnncessaryParenthesis L:954 -> L:1065
            <similar to above>

    jsoup 25 7ff7c43e9fbf4bbaf2b4517b3d4f8a429d87d3bb -> 78 6e3c98c4a578fb7910241e72a5a33014bb8e85f1
        Old (src/main/java/org/jsoup/select/Evaluator.java [OperatorPrecedence] 311 40 8321 8367)
        New (src/main/java/org/jsoup/select/Evaluator.java [OperatorPrecedence] 316 67 8567 8613)
        if statement condition extracted into a variable

    Example of where AST differencing is much better than git differencing:
        jsoup 7 850a9cc02fb72cc450d1a9dc41912fa80fee9020 -> 82 5727d18a04df73982ce8e6d77e965cb768cfee7d
        Old (src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java [BooleanParameter] 392 49 17550 1755
        New (src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java [BooleanParameter] 393 45 16362 1636

Weird: error prone generates two diagnostics:
    mcMMO 170 f6c7049cac76a1c68348e9e570a7617c45747af0..177 500ab628dd6b2539d9be89659a0ad2a9b0b22e1b
    372. double rollChanceHalfMax, graceChanceHalfMax, damageThreshold, chancePerLevel;
    Roll.java 372 16 14867 14874 14892
     [InitializeInline] Initializing variables in their declaring statement is clearer, where possible.
      Did you mean 'graceChanceHalfMax, damageThreshold, chancePerLevel;'?
    Roll.java 372 35 14867 14893 14912
     [InitializeInline] Initializing variables in their declaring statement is clearer, where possible.
      Did you mean 'damageThreshold, chancePerLevel;'?
