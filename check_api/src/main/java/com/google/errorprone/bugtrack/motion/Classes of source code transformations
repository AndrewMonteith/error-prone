Project diff links:
  https://github.com/google/guice/compare/<diff-link>

Technique 1. Character line tracking
Description: Use diff information to track the source lines between two versions, matching two diagnostics if they
             occur in the same position. DIFF-INFORMATION-POS-MAPPER(oldPosition) == newPosition.

Technique 2. Tokenized line tracking
Description: Use diff information track tokenized source lines between two versions, matching diagnostics based on same
             principle as Character line tracking. This technique is slightly more expensive because we have to parse
             the AST of the source file.

Technique 3. Single AST node tracking
Description: Use diff information derived from AST difference algorithms (Curently IJM). Match the start position of a
             diagnostic to a node in the AST of the old source file. Hope the AST matched that node in a new AST. Match
             the diagnostic if the source buffer position of the newly matched node is the same as the diagnostic start
             pos.


Case 1: The line get's put over multiple lines.
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 240 38
    240: scopeInstancesInUse.computeIfAbsent(scope, k -> Lists.newArrayList());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 281 19
    280: scopeInstancesInUse
    281:     .computeIfAbsent(scope, k -> Lists.newArrayList())
    282:     .add(binding.getSource());

Case 2: The line itself get's changed a bit, but the detected expression remains unchanged
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 95 42
    95. Multiset<Object> sources = backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 88 15
    88. backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create()).add(convertedSource);

Case 3: Indentation changes.
Breaks: Character Line Tracking
Doesn't break: Tokenized line tracking
[BooleanParameter] Use parameter comments to document ambiguous literals
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 340 75   [Detected by TokenizedLineTracker]
    340.           binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 351 73
    351.         binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));


Case 4:  Line with diagnostic on is deemed as "deleted" from the source file
Breaks: Definately Character&Token line tracking, maybe not node tracking
[InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: <init>(String message, Throwable cause, List<Object> sources)
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 50 10
    50. public Message(List<Object> sources, String message, Throwable cause) {
 /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 60 10
    60. public Message(List<Object> sources, String message, Throwable cause) {
 Probable cause of problem:
    d071 Message.java 52. public Message(ErrorId errorId, List<Object> sources, String message, Throwable cause) {
 The above introduced line since it's similar to 8758 line 50 confuses the diff algorithm

Case 5: The error is not bound to specific source code
Breaks: All so far
Example: [DefaultPackage] (not found in example in wild, but is a case to consider?)

Interesting diff point:
    Case 6: Start pos token changes
    [ClassNamedLikeTypeParameter] The class's name looks like a Type Parameter
      guice 875868e7263491291d4f8bdc1332bfea746ad673..b7cadc1cfa0623ad377c274eb8db278e3e9a7054
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 159 10 4705 4825
        159. static class A {
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 169 17 4982 5109
        169. public static class A {
      Case of problem:
        Implementation problem since our AST diff algorithm currently uses a different AST representation JDT to javac's JC.
        To solve this we created the 'JDTtoJCPosMapper'