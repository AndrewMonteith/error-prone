Project diff links:
  https://github.com/google/guice/compare/<diff-link>

Technique 1. Character line tracking
Description: Use diff information to track the source lines between two versions, matching two diagnostics if they
             occur in the same position. DIFF-INFORMATION-POS-MAPPER(oldPosition) == newPosition.

Technique 2. Tokenized line tracking
Description: Use diff information track tokenized source lines between two versions, matching diagnostics based on same
             principle as Character line tracking. This technique is slightly more expensive because we have to parse
             the AST of the source file.

Technique 3. Single AST node tracking (via start position)
Description: Use diff information derived from AST difference algorithms (Curently IJM). Match the start position of a
             diagnostic to a node in the AST of the old source file. Hope the AST matched that node in a new AST. Match
             the diagnostic if the source buffer position of the newly matched node is the same as the diagnostic start
             pos.

Techinque 4. Single AST node tracking (via start & end position)


Case 1: The line get's put over multiple lines.
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 240 38
    240: scopeInstancesInUse.computeIfAbsent(scope, k -> Lists.newArrayList());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 281 19
    280: scopeInstancesInUse
    281:     .computeIfAbsent(scope, k -> Lists.newArrayList())
    282:     .add(binding.getSource());

Case 2: The line itself get's changed a bit, but the detected expression remains unchanged
Breaks: Character Line Tracking, Single tokenized line tracking
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 95 42
    95. Multiset<Object> sources = backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 88 15
    88. backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create()).add(convertedSource);

Case 3: Indentation changes.
Breaks: Character Line Tracking
Doesn't break: Tokenized line tracking
[BooleanParameter] Use parameter comments to document ambiguous literals
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 340 75   [Detected by TokenizedLineTracker]
    340.           binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 351 73
    351.         binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));


Case 4:  Line with diagnostic on is deemed as "deleted" from the source file
Breaks: Definately Character&Token line tracking, maybe not node tracking
[InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: <init>(String message, Throwable cause, List<Object> sources)
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 50 10
    50. public Message(List<Object> sources, String message, Throwable cause) {
 /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 60 10
    60. public Message(List<Object> sources, String message, Throwable cause) {
 Probable cause of problem:
    d071 Message.java 52. public Message(ErrorId errorId, List<Object> sources, String message, Throwable cause) {
 The above introduced line since it's similar to 8758 line 50 confuses the diff algorithm

Case 5: The error is not bound to specific source code
Breaks: All so far
Example: ([DefaultPackage if it ever occured in the wild)
[MissingSummary] A summary line is required on public/protected Javadocs.
  mybatis3 1385892b6d0034485ac31a4f8a4a438ad2f5ad55..b3c5ffae3d9d7cb3062ea12f2606909cd4b9e9c8
  /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/GenericTypeSupportedInHierarchiesTestCase.java
  Error prone reports the line number as '-1' for MissingSummary hence any position tracking fails.

Case 6: Start pos token changes
 Original case but solved:
    [ClassNamedLikeTypeParameter] The class's name looks like a Type Parameter
      guice 875868e7263491291d4f8bdc1332bfea746ad673..b7cadc1cfa0623ad377c274eb8db278e3e9a7054
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 159 10 4705 4825
        159. static class A {
      /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/ProxyFactoryTest.java 169 17 4982 5109
        169. public static class A {
      Case of problem:
        Implementation problem since our AST diff algorithm currently uses a different AST representation JDT to javac's JC.
        To solve this we created the 'JDTtoJCPosMapper'

        The position generated by the diagnostric refers to the 'class' token which means whatever is inserted at the front
        doesn't affect tracking the start posiiton of the diagnostic however:
 Currently unsolved:
    [UngroundOverloads] Overloads of 'header' are not grouped together...
      jsoup 63 f4338e20a5e439632e3d2fc8fa3a330ade6d02ad..91 50576455fd4f244375d05b029c25b3b17edfbb74
        /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/Connection.java 383 16 14390 14417
          383. String header(String name);
        /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/Connection.java 384 26 14544 14581
          384. @Nullable String header(String name);

      In this case tracking the start position does not work since the start position points to the start of the MethodDecl
      So 14390 points to the 'String' which is the thing we track through AST diff'ing, however 14544 refers to '@Nullable'


Case 7. Two diagnostics generated with same start position
  Breaks: All but 4
  [AndroidJdkLibsChecker] java.time.ZomedDateTime is not available
    mybatis3 2065ebbfd79ba3a54568d6767963b1d5b31a54ad..638a00c9c91cf87a740d9b9e680acefc7685e273
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 33 1388 1401
        40. ...'ZonedDateTime'...
     Matches with both:
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 46 1388 1407
        40. ...'ZoneDateTime.class'...
      /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java 40 46 1388 1401
        40. ...'ZoneDateTime'...

Case 8. import statics aren't registed in the AST shape (either JDT or spoon) so in specific scenarios can break...
[WildcardImport] Wildcard imports, static or otherwise, should not be used
  mybatis3 0bbefb25236a4c6aaab3a2138aa71d3de2615e8c..b4a235b4e1583fd07a41322cbdae94fbee979498
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java 33 1 1217 1266
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/executor/loader/JavassistProxyTest.java 18 1 694 743

Case 9. start position of the diagnostic stays the same, end position doesn't
   Breaks: all but 3
   [MutableMethodReturnType]
   guice 1bfd94468212e96e0ef3ea9c2da8e6ad19b40b18..80b91afae2f42b938597387c0e8dce419416ca92
      /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTest.java 169 18 6315 6318
        169. public Map getParameterMap() {
      /home/monty/IdeaProjects/java-corpus/guice/extensions/servlet/test/com/google/inject/servlet/ServletTest.java 173 21 6405 6426
        173. public Map<String, String[]> getParameterMap() {

Case 10. Naive tokenization doesn't even guarentee whitespace invariant tracking
    [CatchingUnchecked]
    mybatis3 45a1fcbfa2cef5c9b3bf1fe808498a69467df07a..45ad7efa430d1a59dc3e64431fe22ce45d947f83
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/HeavyInitialLoadTest.java 69 11 2684 2759
          69. } catch(Exception exception) {
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/test/java/org/apache/ibatis/submitted/heavy_initial_load/HeavyInitialLoadTest.java 69 11 2684 2759
          70. } catch (Exception exception) {

Nice: Method refactored and IJM tracks it
   Comparer 2 tracked the below diagnostic whereas 1 didn't
 ----DIAGNOSTIC
 /home/monty/IdeaProjects/java-corpus/metrics/metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedHttpChannelListenerTest.java 130 5 5444 5451
 [MethodCanBeStatic] A private method that does not reference the enclosing instance can be static
     (see https://errorprone.info/bugpattern/MethodCanBeStatic)
   Did you mean 'private static String metricName() {'?
   to:
 ----DIAGNOSTIC
 /home/monty/IdeaProjects/java-corpus/metrics/metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedHttpChannelListenerTest.java 134 5 4727 4734
 [MethodCanBeStatic] A private method that does not reference the enclosing instance can be static
     (see https://errorprone.info/bugpattern/MethodCanBeStatic)
   Did you mean 'private static String metricName(String metricName) {'?

Case 11. IJM cannot track it
    guice 62 af26c7247984f7753c1a84ead9186584f7ef8d51..96 fd4ef5e6a3dbe570383e1dd6763884dba900ad7c
    https://github.com/google/guice/compare/af26c7247984f7753c1a84ead9186584f7ef8d51..fd4ef5e6a3dbe570383e1dd6763884dba900ad7c#diff-a9274f9e5527fc735cd8ebbd9df331fbe8c571f88d1f2de2d6264d7c93de676cL977
    Old:
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/OptionalBinderTest.java 977 5 38707 39162
        [TryFailRefactoring] Prefer assertThrows to try/fail
        Did you mean 'CreationException expected = assertThrows(CreationException.class, () -> Guice.createInjector('?
    New:
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/guice/core/test/com/google/inject/internal/OptionalBinderTest.java 1001 5 39331 39581
        [TryFailRefactoring] Prefer assertThrows to try/fail
        Did you mean 'CreationException expected = assertThrows(CreationException.class, () -> Guice.createInjector(module));'?
    Possible intuition: Diagnostics which encompass large trees are more likely to have subtrees changed so harder to track through AST diff'ing

    dubbo 70 d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..94 dcee618463696494e1748b40e8d58e6e1f5ed19d
        HeaderExchangeClient.java BooleanParameter L:65 -> L:48
            https://github.com/apache/dubbo/compare/d75ce73e94bf85acfbc284e9139d9f64c8cf99c6..dcee618463696494e1748b40e8d58e6e1f5ed19d#diff-456035e093c8422b12ad6f7df3b92675f843e19d2537421ddd92b79f1fd61650L65
            This one seems to be in particular a series of refactorings, where most likely it's the same diagnostic
              just AST differencing has very little chance here. Perhaps refactoring inference might?

    mybatis3 640af60c22010fd56dee7db0ad8cdd420fb19f6a..45a1fcbfa2cef5c9b3bf1fe808498a69467df07a
    ----DIAGNOSTIC
     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 61 23 2148 -1 2175
     [AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
        60. private MapperMethod cachedMapperMethod(Method method) {
        61.    return methodCache.computeIfAbsent(method, k -> new MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));
        62. }

     /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 94 25 3391 -1 3418
     [AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
        92. private MapperMethodInvoker cachedInvoker(Method method) throws Throwable {
        93.     try {
        94.         return methodCache.computeIfAbsent(method, m -> {
        95.             if (m.isDefault()) {
        96.                 try {
        97.                     if (privateLookupInMethod == null) {
        98.                         return new DefaultMethodInvoker(getMethodHandleJava8(method));
        99.                     } else {
        100.                        return new DefaultMethodInvoker(getMethodHandleJava9(method));
        101.                    }
        102.                } catch (IllegalAccessException | InstantiationException | InvocationTargetException
        103.                            | NoSuchMethodException e) {
        104.                    throw new RuntimeException(e);
        105.                }
        106.            } else {
        107.                return new PlainMethodInvoker(new MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));
        108.            }
        109.        });
        110.    } catch (RuntimeException re) {
        111.        Throwable cause = re.getCause();
        112.        throw cause == null ? re : cause;
        113.    }
        114.}

        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 50 24 1789 -1 1805
        [AndroidJdkLibsChecker] java.lang.reflect.Method#isDefault() is not available in java.lang.reflect.Method
        ----DIAGNOSTIC
        /home/monty/IdeaProjects/java-corpus/mybatis-3/src/main/java/org/apache/ibatis/binding/MapperProxy.java 95 14 3446 -1 3457
        [AndroidJdkLibsChecker] java.lang.reflect.Method#isDefault() is not available in java.lang.reflect.Method





Case 12. IJM improperly tracks it
    dubbo/7 427e2d237aca9cb0fca83b3e17c6bdb1bc2abf86..123 6a7028446bcd76ec75c742ab283c7dc5675144e7
      ---- DIAGNOSTIC
      /home/monty/IdeaProjects/java-corpus/dubbo/dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/DynamicConfiguration.java 55 10 2025 2100
      [UngroupedOverloads] Overloads of 'addListener' are not grouped together; found ungrouped overloads on line(s): 35
      ---- MAPS TO:
      /home/monty/IdeaProjects/java-corpus/dubbo/dubbo-configcenter/dubbo-configcenter-api/src/main/java/org/apache/dubbo/configcenter/DynamicConfiguration.java 72 10 2753 2831
      [UngroupedOverloads] Overloads of 'removeListener' are not grouped together; found ungrouped overloads on line(s): 49
    Not too sure as to why it does this...

    jsoup/3 18ef323541f6c369824e0c726b2be55880ec36da..65 bd64b0192c7d3485665afdc10805b587df19eab3
    ----DIAGNOSTIC
    /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/helper/HttpConnection.java 615 21 19376 19388 19483
    [MissingOverride] validateTLSCertificates implements method in Request; expected @Override
        615. public void validateTLSCertificates(boolean value) {
        616.    validateTSLCertificates = value;
        617. }
     to:
     /home/monty/IdeaProjects/java-corpus/jsoup/src/main/java/org/jsoup/helper/HttpConnection.java 614 21 19293 19305 19422
     [MissingOverride] sslSocketFactory implements method in Request; expected @Override
        610. public SSLSocketFactory sslSocketFactory() {
        611.    return sslSocketFactory;
        612. }



Case 13. Diagnostics are collected together into 'one diagnostic'
    ProtectedMembersInFinalClass reports multiple locations are one diagnostic
    dubbo/88 19c1af845d51f3537d95ed645e1a7388a7989aa1..119 bef8f6d9013c9f086327939e0c39fe102f47dfbd
    ----DIAGNOSTIC
    /home/monty/IdeaProjects/java-corpus/dubbo/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java 46 35 1854 1945
    [ProtectedMembersInFinalClass] Make members of final classes package-private: REQUEST_WITH_WARNING_KEY, requestWithWarning
    (see https://errorprone.info/bugpattern/ProtectedMembersInFinalClass)
    Did you mean 'static final String REQUEST_WITH_WARNING_KEY = "lazyclient_request_with_warning";'?

    RemoveUnusedImports generates one per import block and not one per import
    jsoup 63 f4338e20a5e439632e3d2fc8fa3a330ade6d02ad..91 50576455fd4f244375d05b029c25b3b17edfbb74
    [RemovedUnusedImports] UrlConnectTest.java 4 1 -> UrlConnectTest.java 6 1



Perhaps useful things to write about or reference in report:
    Qualified names of the form 'X.Y' are now a root nodes with to children for X and Y respectively.
       mybatis3 28..57 /MonthTypeHandlerTest.java AndroidJdkLibsChecker were getting confused
    Labels on static import's

    Nice example of fine grained tracking:
    jsoup 27 2da07a110b04c7d181c04c0fbcfb141035255374..83 77fcaf4dcdc8fd185e2f5d8eb6aa9c425a38bc9b
        ElementsTest.java UnncessaryParenthesis L:953 -> L:1064
            assertFalse(e0.hashCode() == (e2.hashCode())); -> assertNotEquals(e0.hashCode(), (e2.hashCode()));
        ElementsTest.java UnncessaryParenthesis L:954 -> L:1065
            <similar to above>


Possible questions to ask:
    Is there a relationship between the size of source code described by a diagnostic and how easily it's tracked