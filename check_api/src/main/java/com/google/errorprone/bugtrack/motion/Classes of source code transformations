Project diff links:
  https://github.com/google/guice/compare/<diff-link>

First technique used was using git to track line movement. We match an old and new diagnsotic iff they are the same
kind, the new diagnostic is on the tracked old line and they are on the same column position. This worked well however
it will break if the line containing the diagnostic changes in any way syntatically. Some examples we found in the wild:

Case 1: The line get's put over multiple lines.
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 240 38
    240: scopeInstancesInUse.computeIfAbsent(scope, k -> Lists.newArrayList());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/util/Modules.java 281 19
    280: scopeInstancesInUse
    281:     .computeIfAbsent(scope, k -> Lists.newArrayList())
    282:     .add(binding.getSource());

Case 2: The line itself get's changed a bit, but the detected expression remains unchanged
[AndroidJdkLibsChecker] java.util.Map#computeIfAbsent(K,java.util.function.Function<? super K,? extends V>) is not available in java.util.Map
  guice 875868e7263491291d4f8bdc1332bfea746ad673..9b371d3663db9db230417f3cc394e72b705d7d7f
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 95 42
    95. Multiset<Object> sources = backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create());
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/internal/WeakKeySet.java 88 15
    88. backingMap.computeIfAbsent(key, k -> LinkedHashMultiset.create()).add(convertedSource);

Case 3: Indentation changes.
[BooleanParameter] Use parameter comments to document ambiguous literals
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 340 75
    340.           binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Elements.java 351 73
    351.         binder.modules.put(module, new ModuleInfo(binder, moduleSource, false));


Case 4:  Line is incorrectly(imho) deemed as "deleted" from the source file
[InconsistentOverloads] The parameters of this method are inconsistent with other overloaded versions. A consistent order would be: <init>(String message, Throwable cause, List<Object> sources)
  guice 875868e7263491291d4f8bdc1332bfea746ad673..d071802d48a50dffd89b0cfc61eff251251e637a
  /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 50 10
    50. public Message(List<Object> sources, String message, Throwable cause) {
 /home/monty/IdeaProjects/java-corpus/guice/core/src/com/google/inject/spi/Message.java 60 10
    60. public Message(List<Object> sources, String message, Throwable cause) {
 Probable cause of problem:
    d071 Message.java 52. public Message(ErrorId errorId, List<Object> sources, String message, Throwable cause) {
 The above introduced line since it's similar to 8758 line 50 confuses the diff algorithm

Going to attempt to solve cases 1,2 and 3. Try and track the expression that generated the diagnostic rather than
the line the diagnostic was on. We can then do a character comparison and check whether the two diagnostics refer
to the same expressions.