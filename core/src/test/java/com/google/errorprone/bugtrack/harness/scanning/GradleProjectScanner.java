/*
 * Copyright 2021 The Error Prone Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.errorprone.bugtrack.harness.scanning;

import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.errorprone.bugtrack.harness.utils.FileUtils;
import com.google.errorprone.bugtrack.harness.utils.ShellUtils;
import com.google.errorprone.bugtrack.projects.CorpusProject;
import com.google.errorprone.bugtrack.projects.ProjectFile;
import com.google.errorprone.bugtrack.projects.ShouldScanUtils;
import com.google.errorprone.bugtrack.utils.ProjectFiles;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

import static com.google.errorprone.bugtrack.harness.utils.ListUtils.distinct;
import static com.google.errorprone.bugtrack.projects.ShouldScanUtils.isJavaFile;

public class GradleProjectScanner extends ProjectScanner {
    @Override
    public void cleanProject(Path project) throws IOException, InterruptedException {
        if (project.resolve("gradlew").toFile().exists()) {
            ShellUtils.runCommand(project, "./gradlew", "clean");
        } else {
            ShellUtils.runCommand(project, "gradle", "clean");
        }
    }

    private Path getSrcDirFromTaskname(CorpusProject project, String taskName) {
        // taskName will be of form :target1:...:targetK:compileJava or :target1:...:targetK:compileTestJava
        // :target1:...:targetK:compileJava -----> target1/.../targetK/src/main
        // :target1:...:targetK:compileTestJava ------> target1/.../targetK/src/test
        List<String> taskParts = Arrays.asList(taskName.substring(1).split(":"));

        String projRelativePath = Joiner.on('/').join(taskParts.subList(0, taskParts.size() - 1));
        String filesDir = Iterables.getLast(taskParts).equals("compileJava") ? "src/main" : "src/test";

        return project.getRoot().resolve(projRelativePath).resolve(filesDir);
    }

    private Optional<List<ProjectFile>> getFilesFromTaskName(CorpusProject project, String taskName, List<String> cmdArgs) {
        Path projectSrcDir = getSrcDirFromTaskname(project, taskName);

        if (!projectSrcDir.toFile().exists()) {
            return Optional.empty();
        }

        List<ProjectFile> filesToScan = FileUtils.findFilesMatchingGlob(projectSrcDir, "**/*.java").stream()
                .filter(project::shouldScanFile)
                .map(file -> new ProjectFile(project, file))
                .collect(Collectors.toList());

        // -s flag can appear multiple times
//        addAutogeneratedFiles(project, cmdArgs, filesToScan);

        return Optional.of(distinct(filesToScan));
    }

    private List<ProjectFile> getFilesFromOutput(CorpusProject project, String cmdLineArgs) {
        return Arrays.stream(cmdLineArgs.split(" "))
                .filter(ShouldScanUtils::isJavaFile)
                .map(file -> new ProjectFile(project, Paths.get(file)))
                .collect(Collectors.toList());
    }

    @Override
    public Collection<DiagnosticsScan> getScans(CorpusProject project) throws IOException, InterruptedException {
        String scriptOutput = ShellUtils.runCommand(project.getRoot(),
                "/usr/bin/python3.8",
                ProjectFiles.find("error-prone", "get_gradle_cmdargs.py").toString(),
                project.getRoot().toString());

        if (scriptOutput.trim().isEmpty()) {
            return ImmutableList.of();
        }

        List<DiagnosticsScan> scans = new ArrayList<>();

        String[] scriptOutputLines = scriptOutput.split("\n");
        for (int i = 0; i < scriptOutputLines.length; i += 2) {
            String scanName = scriptOutputLines[i];
            List<String> cmdArgs = filterCmdLineArgs(scriptOutputLines[i + 1]);

//            Optional<List<ProjectFile>> filesToParse = getFilesFromTaskName(project, scanName, cmdArgs);
            List<ProjectFile> filesToParse = getFilesFromOutput(project, scriptOutputLines[i+1]);

            if (!filesToParse.isEmpty()) {
                scans.add(new DiagnosticsScan(
                        scanName,
                        filesToParse,
                        cmdArgs));
            }
        }

        return scans;
    }
}
